import { ModuleWithComponentFactories, NgModule } from "@angular/core"

Conversation opened. 1 read message.

Skip to content
Using Gmail with screen readers
3 of 20,409
My Personal Work
Inbox

abhishek singh <abhisheksinghchauhan442@gmail.com>
10:31 PM (1 hour ago)
to me

<!--Introduction and Basic Theory only-->
/////////Overview of Angular
//What is Angular?
-->Most popular frontend framework to create maintainable web applications.
-->Completely re-write of AngularJS.
-->Developed by Google.
-->Angular CLI enables you to create things faster.

//////Features of Angular
//Application State
[Stored in the Component]
//Application Logic
[Written in the Component]
//Design Logic
[Written in Template]
//Business Logic
[Written in Service]





Goals and Advantages of Angular
Separation of

DOM Manipulation Logic from Application Logic



Separation of HTML Logic from Application Logic



Separation of Business Logic from Application Logic



Make the code Unit Testable



Make the "Single-Page Application Development" easier



Make the code maintainable





Code Compilation Process
Application Source Code

[Type Script]



TypeScript Compiler

[tsc]



Template

[HTML]



Angular Compiler

[ngc]



JavaScript

Code



Executed by the Browser





Do's and Don'ts of Angular
Don'ts

Never perform DOM manipulations directly in Angular Components, to make the "application logic" independent of "design logic" and make it unit testable.

Never write JavaScript code in Angular Templates.

Never write Business logic in Components.

Avoid using jQuery to manipulate DOM elements.



Do's

Always use Routing and Modules.

Prefer Routing Guards and JWT for Authentication & Security.

Always manipulate "application data" by writing the "application logic" in the components.

Always place global css styles in "styles.css" file and local css styles in "component.css" file.

Always write "REST-API calls (AJAX)" and Business Logic in Services only; and return Observables from Services.

Prefer to use Bootstrap [or equivalent].

Always use CSS-pre processor, such as SCSS.







Building Blocks of Angular
Modules

[Collection of Components]



Data Binding

[Mediates Between Component and Templates]





Components

[App Data + Event Handlers]



Templates

[Design Logic]



Dependency Injection

[Loads service objects into Components]



Services

[Business Logic + REST API calls]



Directives

[Direct DOM Manipulation]





Angular Architecture





Angular Packages
1. @angular/core

Provides essential pre-defined decorators, classes, interfaces and modules that are needed to run every angular application.

Ex: @Component, @NgModule, @Pipe, @Directive, @Injectable, @Inject, NgZone, OnChanges, OnInit, ApplicationModule etc.



2. @angular/common

Provides built-in directives that are useful for most of the real-time applications.

Ex: ngIf, ngSwitch, ngClass, ngFor etc.

3. @angular/compiler

Compiles "templates" (html code) into "javascript code".



4. @angular/platform-browser-dynamic

Invokes the angular compiler (JIT compilation) and specifies the startup module and also start executing the application.

5. @angular/platform-browser

Provides a set of pre-defined classes that are related to DOM and browser interaction.

e.g: BrowserModule.



6. @angular/forms

Provides necessary pre-defined classes that are related to are needed to create and execute angular forms.

e.g: FormsModule, ReactiveFormsModule, Validators, ngModel, ngForm etc.



7. @angular/router

Provides necessary pre-defined classes that are needed to create and execute angular routes.

e.g: RouterModule, Routes, ActivatedRoute, CanActivate, routerLink etc.



8. @angular/animations

Provides necessary pre-defined classes that are needed to create and execute angular animations.

e.g: BrowserAnimationsModule, animate, state, style, transition etc.



Angular Packages [Screen 3]
9. @angular/cli

Provides necessary pre-defined commands that are needed to create, compile, build, add items in angular applications.

e.g: ng new, ng serve, ng build, ng test etc.



10. rxjs

Provides necessary pre-defined classes for creating Observables, which are needed to represent the response of REST-API calls of AJAX.

Ex: Observable, Observer, Subject etc.



11. zone.js

Provides necessary pre-defined classes for executing "change detection processes", while executing angular app.







Angular App Folder Structure
e2e      :        Contains "end-to-end" test cases.

src       :        Contains source code of the application.

app

app.component.scss      :         Contains CSS styles of AppComponent.

app.component.html     :       Contains template of AppComponent.

app.component.spec.ts     :         Contains unit test cases of AppComponent.

app.component.ts        :      Contains AppComponent.

app.module.ts     :        Contains AppModule.

app-routing.module.ts      :         Contains Routing Configuration.

assets        :         Contains static files such as images.

favicon.ico         :         Contains browser icon.

index.html         :       Default page / startup page.

main.ts        :         Defines Startup Module.

polyfills.ts       :        Defines polyfills (additional scripts) needed to load & run app.

styles.scss      :         Contains global CSS styles of entire app.

angular.json       :         Contains Angular CLI configuration.

package.json      :         Defines current app (package) details and its dependencies.

tsconfig.json      :         Contains TypeScript Compiler configuration settings.


<!--First App in Angular-->
Creating Angular App using Angular CLI
ng new appName --style=scss --routing



Install NodeJS

Install Visual Studio Code

Install Angular CLI

Create New App using Angular CLI

Create Source Code

Run the App



Installing Angular CLI

npm install @angular/cli -g





Flow of Execution of Angular App
index.html

main.ts

app.module.ts

app.component.ts + app.component.html





//////////////////////////////////////////////Adding Bootstrap to Angular
npm install jquery --save

npm install popper.js --save

npm install bootstrap --save

then you have add the following lines in angular.json file

"styles": [
  "src/styles.scss",
  "node_modules/bootstrap/dist/css/bootstrap.min.css"
],
"scripts": [
  "node_modules/jquery/dist/jquery.min.js",
  "node_modules/popper.js/dist/umd/popper.min.js",
  "node_modules/bootstrap/dist/js/bootstrap.min.js"
]





Components
What is Component?

Component class contains "programming logic" of the application

Component class contains "application data" + "event handler methods".

Component class is responsible to supply data to the template.



Component Class

class Component

{
 Properties
 Methods
}


Component Hierarchy



Component Metadata





Routing
What is Routing?

Page Navigation, to create "Single-Page-Application".

Route maps an URL to a component.



Importing "@angular/router" package in "package.json" file

"@angular/router": "~7.2.0"



Define Base URL in "index.html" file

<base href="/">



Create hyperlink for route

<a routerLink="/path"> Link text </a>


Routing Steps
Create Router Module

const routes: Routes = [
{ path: "path1", component: Component1 },
{ path: "path2", component: Component2 },
…
];
 
---
 
@NgModule({
 imports: [ RouterModule.forRoot(routes) ],
 exports: [ RouterModule ]
})
export class AppRoutingModule
{
}


Create Router Outlet in app.component.html

<router-outlet> </router-outlet>

<!-- DataBinding -->
<!-- DataBinding -->
<!-- DataBinding -->

<nav>
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a routerLink="/">Home</a></li>
      <li class="breadcrumb-item active">Dashboard</li>
    </ol>
  </nav>
  
  <h5>Dashboard</h5>
  <div class="row">
    <div class="col-lg-3 pb-3" style="background-color: #e9e6e6">
      <div class="row">
        <div
          class="col-11 text-white text-center mx-auto rounded pt-2 pb-2 font-weight-bold"
          style="
            background-color: #a39e9e;
            font-family: 'Arial Narrow Bold', sans-serif;
          "
        >
          {{ Designation }}
        </div>
        <div class="col-12 text-center mt-2">
          <img src="assets/user.png" width="120px" />
        </div>
        <div
          class="col-12 text-center pt-2 pb-2 font-weight-bold"
          style="font-family: Tahoma"
        >
          {{ Username }}
        </div>
        <div class="col-12 text-center pt-2 pb-2" style="font-family: Arial">
          TEAM SUMMARY
        </div>
        <div class="col-12 mb-3">
          <ul class="list-group">
            <li
              class="list-group-item d-flex justify-content-between align-items-center"
            >
              NO. OF TEAM MEMBERS
              <span
                class="badge badge-secondary badge-pill"
                style="font-size: 13px"
                >{{ NoOfTeamMembers }}</span
              >
            </li>
            <li
              class="list-group-item d-flex justify-content-between align-items-center"
            >
              TOTAL COST OF ALL PROJECTS
              <span
                class="badge badge-secondary badge-pill"
                style="font-size: 13px"
                >$ {{ TotalCostOfAllProjects }} k</span
              >
            </li>
            <li
              class="list-group-item d-flex justify-content-between align-items-center"
            >
              PENDING TASKS
              <span
                class="badge badge-secondary badge-pill"
                style="font-size: 13px"
                >{{ PendingTasks }}</span
              >
            </li>
            <li
              class="list-group-item d-flex justify-content-between align-items-center"
            >
              UPCOMING PROJECTS
              <span
                class="badge badge-secondary badge-pill"
                style="font-size: 13px"
                >{{ UpComingProjects }}</span
              >
            </li>
          </ul>
        </div>
        <div
          class="col-12 text-center pt-2 pb-2"
          style="font-family: 'Arial Narrow'"
        >
          CLIENTS
        </div>
        <div class="col-12">
          <ul class="list-group list-group-flush">
            <li class="list-group-item">ABC Infotech Ltd.</li>
            <li class="list-group-item">DEF Software Solutions</li>
            <li class="list-group-item">GHI Industries</li>
          </ul>
        </div>
      </div>
    </div>
    <div class="col-lg-6">
      <div class="row">
        <div class="col-12 pt-0 pb-2" style="background-color: #e9e6e6">
          <div class="row mt-2">
            <div class="col-6 text-left">
              <div class="dropdown">
                <button
                  class="btn btn-secondary dropdown-toggle"
                  type="button"
                  id="dropdownMenuButton1"
                  data-toggle="dropdown"
                >
                  Project A
                </button>
                <div class="dropdown-menu">
                  <a class="dropdown-item" href="#">Project A</a>
                  <a class="dropdown-item" href="#">Project B</a>
                  <a class="dropdown-item" href="#">Project C</a>
                  <a class="dropdown-item" href="#">Project D</a>
                </div>
              </div>
            </div>
            <div class="col-6 text-right">
              <div class="dropdown">
                <button
                  class="btn btn-secondary dropdown-toggle"
                  type="button"
                  id="dropdownMenuButton2"
                  data-toggle="dropdown"
                >
                  2019
                </button>
                <div class="dropdown-menu">
                  <a class="dropdown-item" href="#">2019</a>
                  <a class="dropdown-item" href="#">2018</a>
                  <a class="dropdown-item" href="#">2017</a>
                  <a class="dropdown-item" href="#">2016</a>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div
          class="col-11 mx-auto mt-1 text-white text-center pt-2 pb-2 mx-auto rounded font-weight-bold"
          style="background-color: #718d97; font-family: 'Arial Narrow'"
        >
          PROJECT BRIEFING
        </div>
        <div class="col-12">
          <table class="table table-borderless">
            <tr>
              <td>Project Cost</td>
              <td>${{ ProjectCost }}</td>
            </tr>
            <tr>
              <td>Current Expenditure</td>
              <td>${{ CurrentExpenditure }}</td>
            </tr>
            <tr>
              <td>Available Funds</td>
              <td>${{ AvailableFunds }}</td>
            </tr>
          </table>
        </div>
        <div
          class="col-11 mx-auto mt-1 text-white text-center pt-2 pb-2 mx-2 rounded font-weight-bold"
          style="background-color: #718d97; font-family: 'Arial Narrow'"
        >
          TEAM MEMBERS SUMMARY
        </div>
        <div class="col-12">
          <table class="table">
            <tr>
              <th>Region</th>
              <th>Team Members Count</th>
              <th>Temporarily Unavailable Members</th>
            </tr>
            <tr>
              <td>
                <b>East</b>
              </td>
              <td>20</td>
              <td>4</td>
            </tr>
            <tr>
              <td>
                <b>South</b>
              </td>
              <td>15</td>
              <td>8</td>
            </tr>
            <tr>
              <td>
                <b>West</b>
              </td>
              <td>17</td>
              <td>1</td>
            </tr>
            <tr>
              <td>
                <b>North</b>
              </td>
              <td>15</td>
              <td>6</td>
            </tr>
          </table>
        </div>
      </div>
    </div>
    <div class="col-lg-3" style="background-color: #e9e6e6">
      <div class="row">
        <div
          class="col-11 mx-auto mt-1 text-white text-center pt-1 pb-2 mx-2 rounded font-weight-bold"
          style="background-color: #718d97; font-family: 'Arial Narrow'"
        >
          TEAM MEMBERS
        </div>
        <div class="col-lg-12 pt-2">
          <div class="accordion" id="accordion1">
            <!-- east starts -->
            <div class="card">
              <div class="card-header bg-secondary" id="card1">
                <h2 class="mb-0">
                  <button
                    class="btn btn-link text-white"
                    type="button"
                    data-toggle="collapse"
                    data-target="#cardbody1"
                  >
                    East
                  </button>
                </h2>
              </div>
              <div id="cardbody1" class="collapse show" data-parent="#accordion1">
                <div class="card-body">
                  <table class="table">
                    <thead>
                      <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Status</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td>1</td>
                        <td>Ford</td>
                        <td><i class="fa fa-phone"></i> Available</td>
                      </tr>
                      <tr>
                        <td>2</td>
                        <td>Miller</td>
                        <td><i class="fa fa-phone"></i> Available</td>
                      </tr>
                      <tr>
                        <td>3</td>
                        <td>Jones</td>
                        <td><i class="fa fa-user-times"></i> Busy</td>
                      </tr>
                      <tr>
                        <td>4</td>
                        <td>James</td>
                        <td><i class="fa fa-user-times"></i> Busy</td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
            <!-- east ends -->
  
            <!-- south starts -->
            <div class="card">
              <div class="card-header bg-secondary" id="card2">
                <h2 class="mb-0">
                  <button
                    class="btn btn-link text-white"
                    type="button"
                    data-toggle="collapse"
                    data-target="#cardbody2"
                  >
                    South
                  </button>
                </h2>
              </div>
              <div id="cardbody2" class="collapse" data-parent="#accordion1">
                <div class="card-body">
                  <table class="table">
                    <thead>
                      <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Status</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td>1</td>
                        <td>Jones</td>
                        <td><i class="fa fa-user-times"></i> Busy</td>
                      </tr>
                      <tr>
                        <td>2</td>
                        <td>Miller</td>
                        <td><i class="fa fa-phone"></i> Available</td>
                      </tr>
                      <tr>
                        <td>3</td>
                        <td>Ford</td>
                        <td><i class="fa fa-user-times"></i> Busy</td>
                      </tr>
                      <tr>
                        <td>4</td>
                        <td>James</td>
                        <td><i class="fa fa-phone"></i> Available</td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
            <!-- south ends -->
  
            <!-- west starts -->
            <div class="card">
              <div class="card-header bg-secondary" id="card3">
                <h2 class="mb-0">
                  <button
                    class="btn btn-link text-white"
                    type="button"
                    data-toggle="collapse"
                    data-target="#cardbody3"
                  >
                    West
                  </button>
                </h2>
              </div>
              <div id="cardbody3" class="collapse" data-parent="#accordion1">
                <div class="card-body">
                  <table class="table">
                    <thead>
                      <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Status</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td>1</td>
                        <td>Jones</td>
                        <td><i class="fa fa-user-times"></i> Busy</td>
                      </tr>
                      <tr>
                        <td>2</td>
                        <td>Miller</td>
                        <td><i class="fa fa-phone"></i> Available</td>
                      </tr>
                      <tr>
                        <td>3</td>
                        <td>Ford</td>
                        <td><i class="fa fa-user-times"></i> Busy</td>
                      </tr>
                      <tr>
                        <td>4</td>
                        <td>James</td>
                        <td><i class="fa fa-phone"></i> Available</td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
            <!-- west ends -->
  
            <!-- north starts -->
            <div class="card">
              <div class="card-header bg-secondary" id="card4">
                <h2 class="mb-0">
                  <button
                    class="btn btn-link text-white"
                    type="button"
                    data-toggle="collapse"
                    data-target="#cardbody4"
                  >
                    North
                  </button>
                </h2>
              </div>
              <div id="cardbody4" class="collapse" data-parent="#accordion1">
                <div class="card-body">
                  <table class="table">
                    <thead>
                      <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Status</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td>1</td>
                        <td>Jones</td>
                        <td><i class="fa fa-user-times"></i> Busy</td>
                      </tr>
                      <tr>
                        <td>2</td>
                        <td>Miller</td>
                        <td><i class="fa fa-phone"></i> Available</td>
                      </tr>
                      <tr>
                        <td>3</td>
                        <td>Ford</td>
                        <td><

          // nfIf
          Syntax : <tag * ngIf = "condition"> </tag>
          Syntax : <tag * ngIf = "condition ; then TrueTemplate; else FalseTemplate"> </tag>

   //Build-in Pipes
   // {{property | uppercase}} -> Converts string to upper case. 
// {{property |lowercase }}   -> Converts the string to lower case.
// {{property | slice: startindex: endindex }} --> Gets part of string, between startindex and endindex.

// {{property | number:.2}} -> Provides digit grouping and controls decimal places.

 // {{property | currency: "USD" }} -> Providers currency symbol.

//{{property | percent }} -> Converts the number to percent.

//{{property | json }} -> Converts the "JavaScript object" to "ison"

//{{property | date }} -> Specifies date format.

////////////////////////////////////////////////////////////////////////////////////// ngSwitch
<tag [ngSwitch] = "property">
<tag* ngSwitchCase = "'value1'" >Content here </tag>
<tag* ngSwitchCase = "'value2'" >Content here </tag>
<tag* ngSwitchCase = "'value3'" >Content here </tag>
</tag>
</tag>

//////////////////////////////////////////////////////////////////Module And Services
// -> Module is a collection of Components , directives , pipes .
// -> Mainly used to organze the components and others(directivesand pipes).

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, AppRoutingModule],
  providers: [],
  exports: [],
  bootstrap: [AppComponent],
})
export class AppModule {}
// -> Goals of Modules:
// -> Consolidate components , directives, pipes into cohesive of function.
// -> Make some of the components , directives , pipes into cohesive functionality.
// -> Import componets ɵgetDirectives, pipes from other modules, that are required by currect module's component templates.
// -> Provide services that the other modules can use.

// -> Angular Modules are called ɵɵsetNgModuleScope.
// -> An NgModule is a class that is decorated with "NgModule
// decorator, that contains the following Metadata ;

// //Module metadata :
// ->declarations : List of components , directives and provideProtractorTestingSupport, that are part of currect module.
// -> exports : List of components , directives and pipes that are public that can be accessible in other Module, that are importing thecurrent module.children
// -> imports : List of ModuleWithComponentFactories, that the current module imports; SourceBuffer, the current module can use 
//  components , directives, pipes that are already exported by that particular module.  


///////////////////////////////////////////////////////////////////Service And ID ////////
Service is a class, which is a collection of properties & methods, which contains re-usable programming logic, which mainly contains "business logic" and also performs "data source interaction".

Services can be accessible in components.

Goals of Services:

To separate business logic and data access logic from components.

Make components contain code for only supplying the data to the template and respond to the user actions such as click and also call the necessary services.

Create Service class:

Create a class with one or more properties and methods that contains business logic and data access logic.

2. Make ready the Service for Dependency Injection:

Add @Injectable() decorator above the service class.

3. Provide the service Globally / Locally:

Add providedin: "root" option in @Injectable() decorator. [or].

Add providers: [ Service] in AppModule's metadata. [or].

Add providers: [ Service) in any other module's metadata. [or].

Add providers: [ Service] in any other component's metadata.

4. Inject the service into actual component:

Add @Inject(Service) private referenceVariable : Service in any component's constructor. [or]

Add private reference Variable component's constructor. : Service in any

C {

}

////////////////////////////////////////////////////////////////////////////////////AJAX and Rest Api Calls
What is Observable and Observer?

"Observables and Observer" is a pattern of "message passing" from "publisher" to "subscriber".

Flow of functionality:

Observable is created.

Observer subscribes to the Observable.

Observable can pass messages (notifications) to the Observer.

Each time, when the Observable passes a notification, it is received by Observer.

Real-time usage of Observables and Observer:

While receiving response from AJAX.

While performing large tasks in client (browser).

Observables execute only when the observer subscribes to it.

AJAX (Asynchronous JavaScript And Xml) is NOT a language, but it is a concept, which is used to "send background request to server" and also "get background response from server", without refreshing (reloading) the web page in the browser.



Browser (Client)



User performs some activity



Send AJAX request to server



Server

Receive the request from browser

Same Browser (Client)



Do process (db connection)



Get response from server



Send response to browser



Types of Requests



Get :Used to retrieve / search data from server
Post:Used to insert data to server
Put: Used to update data on server
Delete:Used to delete data from server

/////////////////////
////////////////////I have to take notes.
////////////////////







//////////////////////////////////////////////////////////////Component Communucation
//1️⃣ Parent to Child Communication (Using @Input):

The parent component sends data to its child component.

This is done using the @Input() decorator.


Example:
Parent Component (app.component.ts):

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  template: `<app-child [childMessage]="parentMessage"></app-child>`,
})
export class AppComponent {
  parentMessage = "Hello from Parent!";
}

Child Component (child.component.ts):

import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-child',
  template: `<p>Message from Parent: {{ childMessage }}</p>`,
})
export class ChildComponent {
  @Input() childMessage: string = ''; // Receive message from Parent
}

Output:

Message from Parent: Hello from Parent!

//
/////////////////
2️⃣ Child to Parent Communication (Using @Output and EventEmitter):

The child component sends data back to the parent.

This is done using @Output() and EventEmitter.


Example:
Child Component (child.component.ts):

import { Component, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-child',
  template: `<button (click)="sendMessage()">Send Message</button>`,
})
export class ChildComponent {
  @Output() messageEvent = new EventEmitter<string>();

  sendMessage() {
    this.messageEvent.emit('Hello from Child!');
  }
}

Parent Component (app.component.ts):

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  template: `<app-child (messageEvent)="receiveMessage($event)"></app-child>
             <p>{{ message }}</p>`,
})
export class AppComponent {
  message: string = '';

  receiveMessage(msg: string) {
    this.message = msg;
  }
}

Output:

Hello from Child!
